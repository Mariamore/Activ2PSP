package es.serviciorestservidor.controlador;



import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import es.serviciorestservidor.modelo.entidad.Libro;
import es.serviciorestservidor.modelo.negocio.Biblioteca;

@RestController
public class ControladorBiblioteca {
	
	//Hacemos la inyecci√≥n de dependencias del objeto Biblioteca
	@Autowired
	private Biblioteca biblioteca;
	
	
	@PostMapping(path = "biblioteca", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Libro> altaLibro(@RequestBody Libro l){
		System.out.println("altaLibro -> objeto libro "+ l);
		Libro libroNuevo =biblioteca.altaLibro(l);
		if(libroNuevo!= null) {
		return new ResponseEntity<Libro>(l, HttpStatus.CREATED);
		} else  {
			return new ResponseEntity<Libro> (l, HttpStatus.BAD_REQUEST);
		}
		
	}
	
	@DeleteMapping(path="biblioteca/{id}")
	public ResponseEntity<Libro> borrarLibro(@PathVariable("id") int iD){
		System.out.println("borrarLibro -> ID a borrar " + iD);
		Libro l = biblioteca.borrarLibro(iD);
		if (l!=null) {
			return new ResponseEntity<Libro>(l, HttpStatus.OK);
		} else {
			return new ResponseEntity<Libro> (l, HttpStatus.NOT_FOUND);
		}
	}
	
	@PutMapping(path ="biblioteca/{id}", consumes = MediaType.APPLICATION_JSON_VALUE, produces= MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Libro> modificarPorID(@RequestBody Libro l, @PathVariable("id") int iD){
		System.out.println("modificarPorID -> ID a modificar " + iD);
		System.out.println("modificarPorID -> Datos a modificar " + l);
		l.setiD(iD);
		Libro lUpdate = biblioteca.modificarPorID(l);
		if (lUpdate != null) {
			return new ResponseEntity<Libro> (lUpdate, HttpStatus.OK);
		}else {
			return new ResponseEntity<Libro> (lUpdate, HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path="biblioteca/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Libro> buscarPorID(@PathVariable("id") int id){
		System.out.println("buscarPorID -> ID a buscar " + id);
		Libro l = biblioteca.buscarPorID(id);
		
		if (l != null) {
			return new ResponseEntity<Libro> (l, HttpStatus.OK);
			
		} else {
			return new ResponseEntity<Libro> (l, HttpStatus.NOT_FOUND);
		}

	}
	
	
	
	@GetMapping(path="biblioteca", produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Libro>> buscarTodos(){
		List<Libro> listaLibros = null;
		System.out.println("buscarTodos -> Listando los libros");
		listaLibros = biblioteca.buscarTodos();
		return new ResponseEntity<List<Libro>> (listaLibros, HttpStatus.OK);
	}
}